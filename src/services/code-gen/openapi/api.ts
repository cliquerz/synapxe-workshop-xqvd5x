/* tslint:disable */
/* eslint-disable */
/**
 * Synapxe Node HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'guid': string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    'updatedAt': number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'personType': string;
}
/**
 * 
 * @export
 * @interface PatientCreateResponse
 */
export interface PatientCreateResponse {
    /**
     * 
     * @type {string}
     * @memberof PatientCreateResponse
     */
    'guid': string;
    /**
     * 
     * @type {string}
     * @memberof PatientCreateResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PatientCreateResponse
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof PatientCreateResponse
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface PatientRequestBody
 */
export interface PatientRequestBody {
    /**
     * 
     * @type {string}
     * @memberof PatientRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientRequestBody
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientRequestBody
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface PatientSearchResponse
 */
export interface PatientSearchResponse {
    /**
     * 
     * @type {number}
     * @memberof PatientSearchResponse
     */
    'total': number;
    /**
     * 
     * @type {Array<Patient>}
     * @memberof PatientSearchResponse
     */
    'items': Array<Patient>;
}

/**
 * PatientApi - axios parameter creator
 * @export
 */
export const PatientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createPatient
         * @param {PatientRequestBody} body Body required in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientPostPatient: async (body: PatientRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPatientPostPatient', 'body', body)
            const localVarPath = `/patient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPatient
         * @param {string} guid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientGetPatientGuid: async (guid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('getPatientGetPatientGuid', 'guid', guid)
            const localVarPath = `/patient/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary searchPatients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPatientsPostPatientSearch: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updatePatient
         * @param {string} guid 
         * @param {PatientRequestBody} body Body required in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePatientPutPatientGuid: async (guid: string, body: PatientRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('updatePatientPutPatientGuid', 'guid', guid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePatientPutPatientGuid', 'body', body)
            const localVarPath = `/patient/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientApi - functional programming interface
 * @export
 */
export const PatientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createPatient
         * @param {PatientRequestBody} body Body required in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPatientPostPatient(body: PatientRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPatientPostPatient(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getPatient
         * @param {string} guid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientGetPatientGuid(guid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPatientGetPatientGuid(guid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary searchPatients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPatientsPostPatientSearch(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPatientsPostPatientSearch(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updatePatient
         * @param {string} guid 
         * @param {PatientRequestBody} body Body required in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePatientPutPatientGuid(guid: string, body: PatientRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePatientPutPatientGuid(guid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PatientApi - factory interface
 * @export
 */
export const PatientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientApiFp(configuration)
    return {
        /**
         * 
         * @summary createPatient
         * @param {PatientRequestBody} body Body required in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatientPostPatient(body: PatientRequestBody, options?: any): AxiosPromise<PatientCreateResponse> {
            return localVarFp.createPatientPostPatient(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPatient
         * @param {string} guid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientGetPatientGuid(guid: string, options?: any): AxiosPromise<Patient> {
            return localVarFp.getPatientGetPatientGuid(guid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary searchPatients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPatientsPostPatientSearch(options?: any): AxiosPromise<PatientSearchResponse> {
            return localVarFp.searchPatientsPostPatientSearch(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updatePatient
         * @param {string} guid 
         * @param {PatientRequestBody} body Body required in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePatientPutPatientGuid(guid: string, body: PatientRequestBody, options?: any): AxiosPromise<Patient> {
            return localVarFp.updatePatientPutPatientGuid(guid, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientApi - object-oriented interface
 * @export
 * @class PatientApi
 * @extends {BaseAPI}
 */
export class PatientApi extends BaseAPI {
    /**
     * 
     * @summary createPatient
     * @param {PatientRequestBody} body Body required in the request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public createPatientPostPatient(body: PatientRequestBody, options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).createPatientPostPatient(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPatient
     * @param {string} guid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public getPatientGetPatientGuid(guid: string, options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).getPatientGetPatientGuid(guid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary searchPatients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public searchPatientsPostPatientSearch(options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).searchPatientsPostPatientSearch(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updatePatient
     * @param {string} guid 
     * @param {PatientRequestBody} body Body required in the request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public updatePatientPutPatientGuid(guid: string, body: PatientRequestBody, options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).updatePatientPutPatientGuid(guid, body, options).then((request) => request(this.axios, this.basePath));
    }
}


